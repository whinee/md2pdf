{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"md2pdf       Markdown to PDF converter   For writing faster? No. For writing with *class*? Yusss  <p>Github: github.com/whinee/md2pdf</p> <p>Website: m2p.whinyaan.xyz</p> <p>To be updated, be sure to watch this repository and join the Discord Support Server for this and other projects.</p> <p>Interested in commissioning projects? Inquire through Discord(whi_ne#4783) or through e-mail(whinyaan@protonmail.com). Price starts at 30 USD.</p>"},{"location":"#toc","title":"Table of Contents","text":"<ul><li>Important</li><li>Downloads</li><li>What\u2019s this?<ul><li>Supported OSes</li></ul></li><li>Usage</li><li>Getting Started</li><li>Advantages</li><li>Disadvantages</li><li>Translations</li><li>Known Issues and Limitations</li><li>Considerations</li><li>Contributions</li><li>License<ul><li>MIT</li></ul></li><li>Attribution<ul><li>MIT Logo</li><li>Icons</li></ul></li><li>Further Reading</li></ul>"},{"location":"#important","title":"Important","text":"<p>md2pdf is still in Unreleased Alpha Development Stage.</p> <p>Using the program at this stage is not recommended.</p>"},{"location":"#downloads","title":"Downloads","text":"<p>Since people are looking for the download first, here you go:</p> <p>Follow this link to install md2pdf in your machine.</p>"},{"location":"#what-s-this","title":"What\u2019s this?","text":"<p>md2pdf is a Markdown to PDF converter that can also do a lot of stuff:</p> <ul> <li>Headers and Footers<ul> <li>Can be in Markdown or HTML format</li> <li>Support for first page header and footer</li> </ul> </li> <li>Print output HTML</li> <li>Programmatic Usage</li> </ul>"},{"location":"#what-s-this-supported-oses","title":"Supported OSes","text":"<ul> <li>Windows</li> <li>MacOS</li> <li>Linux</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>     This section is not yet complete. </p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>The instructions will get you a copy of the project up and running on your local machine for development and testing purposes., visit this link</p>"},{"location":"#advantages","title":"Advantages","text":"<ul> <li>Standardized Styles</li> <li>Consistent Results</li> <li>Programmatic Usage</li> </ul>"},{"location":"#disadvantages","title":"Disadvantages","text":"<ul> <li>This program does not guarantee that you will be able to write faster, just be able to write in markdown (effectively plaintext) and produce consistent results (assuming that you use the same text, settings, stylesheet/s, and whatnot)</li> <li>Have to link pictures online in order to attach one in the document, unlike in fancy word editors like Microsoft Word or LibreOffice Writer</li> </ul>"},{"location":"#translations","title":"Translations","text":"<p>This program is translation (i18n) ready!</p> <p>Please refer to this link to learn more on how to create a translation for this program.</p>"},{"location":"#known-issues-and-limitations","title":"Known Issues and Limitations","text":"<ul> <li>This program can not be run in termux due to an inherent bug in AOSP that the said org's developers refuses to fix even if it will only take (apparently) a change in a single line of code (I forgot where the relevant Stackoverflow link is stored at, nor do I know the keywords for searching it up)</li> </ul>"},{"location":"#considerations","title":"Considerations","text":"<p>I want to implement more features as to extend the markdown specification, and in this link, you can see the following considerations to be made for future feature implementations.</p> <p>If you want to help, check the TODO of the developer and the contribution guidelines.</p>"},{"location":"#contributions","title":"Contributions","text":"<p>For the contribution guidelines, visit this link.</p> <p>For contributing in the latest version of md2pdf, visit this link</p>"},{"location":"#license","title":"License","text":""},{"location":"#mit","title":"MIT","text":"<p>Copyright for portions of project md2pdf are held by [Julien Maupetit, Github account jmaupetit owner, 2016-2021] as part of project md2pdf, by [c4ffein, Github account c4ffein owner, 2021-2022] as part of project txt2pdf, by [Simon Sapin, Github account SimonSapin owner, 2011-2023] as part of project WeasyPrint, by [Pallets, Github account pallets owner, 2014-2022] as part of project click, by [mbarkhau, Github account mbarkhau owner, 2019-2021] as part of project markdown-katex, by [Python-Markdown, Github account Python-Markdown owner, 2007-2023] as part of project markdown, by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL, and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL.</p> <p>All other copyright for project md2pdf are held by [Github Account whinee Owner, 2023].</p> <p>Check the LICENSE for more details.</p>"},{"location":"#attribution","title":"Attribution","text":""},{"location":"#attribution-mit-logo","title":"MIT Logo","text":"<p>Massachusetts Institute of Technology (vectorized by Mysid, modified by whinee), Public domain, via Wikimedia Commons</p>"},{"location":"#attribution-icons","title":"Icons","text":"<p>Exclamation Mark, Code Fork, Star, Group, Code, and Discord icons by Icons8</p> <p> NOTE: If a reference or source material is not attributed properly or not at all, please kindly message me at Discord: whi_ne#4783 or create a pull request so I can properly give credit to their respective authors.      </p>"},{"location":"#further-reading","title":"Further Reading","text":"<ul> <li>Frequently Asked Questions</li> <li>License Agreement</li> <li>Latest Documentation (0.0.x.x)</li> <li>All Documentation</li> <li>Changelog</li> <li>Latest Bump</li> <li>Latest Commit</li> <li>Notes for whi~nyaan!</li> <li>whi~nyaan!'s diary</li> </ul>"},{"location":"TODO/","title":"TODO","text":""},{"location":"TODO/#toc","title":"Table of Contents","text":"<ul><li>Todo</li><li>In Progress</li><li>Done</li></ul>"},{"location":"TODO/#todo","title":"Todo","text":"<ul> <li>[ ] n-column support</li> <li>[ ] GUI</li> <li>[ ] Custom Help Function (to only compute help page's width when help is actually called; the CLI is actually already fast enough that this might not be necessary, but is just a mere novelty)</li> </ul>"},{"location":"TODO/#in-progress","title":"In Progress","text":"<ul> <li>[ ] Custom mermaid.js renderer (will be done after the GUI, as the HUI will be written in JS, and the rendered will be using JS too)</li> </ul>"},{"location":"TODO/#done","title":"Done","text":"<ul> <li>[x] Custom KaTex renderer (as the best one for Weasyprint use, mbarkhau/markdown-katex is so dang slow)</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"Changelog"},{"location":"changelog/#0-0-0-0-0-0","title":"0.0.0.0-alpha.0","text":""},{"location":"considerations/","title":"Considerations","text":"Considerations for Future Feature Implementation"},{"location":"considerations/#toc","title":"Table of Contents","text":"<ul><li>Page Breaks</li><li>Columns</li><li>GUI</li></ul>"},{"location":"considerations/#page-breaks","title":"Page Breaks","text":"<p>There is no plain markdown way to add pagebreak in a markdown file. However, I came across this stackoverflow answer that mentions that the answer-er uses <code>&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;</code> to denote pagebreak in their documents. And I liked that! And as such, I think I will implement just that in later versions of this program.</p>"},{"location":"considerations/#columns","title":"Columns","text":"<p>Before this project can even convert markdown to PDF files in sub-ten seconds, I have been using tables as substitute for columns. This is as the Commonmark Markdown specification does not support such feature.</p> <p>However, there is a simple problem with tables in markdown: it does not support multi-line cells</p> <p>Time and time again, I have searched for ways to be able to write multi-line cells in a kind of markdown way. All of them are ugly implementations. None of them can satisfy me.</p> <p>And then I came across MultiMarkdown's table documentation which makes an interesting observation:</p> <p>If you need complex tables you will need to create them by hand or with a tool specifically designed for your output format. At some point, however, you should consider whether a table is really the best approach if you find MultiMarkdown tables too limiting.</p> <p>And I think that that is true.</p> <p>However, I have thought of a solution. That is to parse markdown inside HTML tags. Such as that the following markdown...</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Header&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            - Lorem ipsum dolor sit amet\n            - Consectetur adipiscing elit\n            - Integer molestie lorem at massa\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>...will be converted to HTML like the following:</p> <pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Header&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;\n            &lt;ul&gt;\n                &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;\n                &lt;li&gt;Consectetur adipiscing elit&lt;/li&gt;\n                &lt;li&gt;Integer molestie lorem at massa&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>But, I think that the best solution would be to just make my own implementation of columns.</p> <p>A solution I am considering at the time of writing is using a custom HTML tag called <code>cols</code> (stands for columns) that wraps <code>col</code> (stands for column) tags, which in turn wraps content in a column. Such as that the following markdown leads to 3 columns.</p> <pre><code>&lt;cols&gt;\n    &lt;col&gt;\n        Column #1\n    &lt;/col&gt;\n    &lt;col&gt;\n        Column #2\n    &lt;/col&gt;\n    &lt;col&gt;\n        Column #3\n    &lt;/col&gt;\n&lt;/cols&gt;\n</code></pre> <p>And yes, the content inside each <code>col</code> tags will be interpreted as markdown.</p>"},{"location":"considerations/#gui","title":"GUI","text":"<p>I do not have proper plans for the GUI of this project yet. But boredom does wonders.</p> <p>I was once subjected to the horrors of national achievement test and mock exams for 4 days. And we are not allowed to use our phones for 4-5 hours straight a day, for 4 days. And so, I scribbled to a scratch paper that I had. And what do you know, I have this graph.</p> <p>A week later, I graphed the thing in mermaid.js, and here it is:</p> <pre><code>sequenceDiagram\n    participant A as core.py\n    participant B as main.js\n    participant C as renderer.js\n\n    Note over A,C: Initialize\n\n    B -) C: Run\n    note left of C: show loading screen\n    B -) A: Run\n    alt log path is `None`\n        A -&gt;&gt; B: request Electron.js App Directory\n        note left of B: get Electron.js App Directory\n        B --) A: Electron.js App Directory\n    end\n\n    A -&gt;&gt; B: log path\n    C -&gt;&gt; B: ready\n    B -&gt;&gt; C: tx log path\n    note left of C: console.log(log path)\n    C -&gt;&gt; B: ack\n    B -&gt;&gt; A: tx ack\n    A -&gt;&gt; B: cfg\n    note left of B: process cfg\n    B -&gt;&gt; C: tx cfg\n    note left of C: remove loading screen\n\n    Note over A,C: Nominal Operation\n\n    alt log\n        B -) A: log\n        note right of A: log\n    end\n\n    alt log\n        C -)+ B: log\n        B -)- A: tx log\n        note right of A: log\n    end\n\n    alt mod cfg\n        B -) A: mod cfg\n        note right of A: rewrite cfg\n    end\n\n    alt mod cfg\n        C -)+ B: mod cfg\n        B -)- A: tx mod cfg\n        note right of A: rewrite cfg\n    end\n\n    alt ctl\n        B -) A: ctl\n        note right of A: process\n        alt res\n            A --) B: res\n            alt tx res\n                B --) C: tx res\n            end\n        end\n    end\n\n    alt ctl\n        C -) B: ctl\n        B -) A: tx ctl\n        note right of A: process\n        alt res\n            A --) B: res\n            alt tx res\n                B --) C: tx res\n            end\n        end\n    end</code></pre>"},{"location":"contributing/","title":"Contributing","text":"Contributing to md2pdf  <p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer this project in your project's README - Mention the project at local meetups and tell your friends/colleagues</p>"},{"location":"contributing/#toc","title":"Table of Contents","text":"<ul><li>Code of Conduct</li><li>I Have a Question</li><li>I Want To Contribute<ul><li>Legal Notice</li><li>Reporting Bugs<ul><li>Before Submitting a Bug Report</li><li>How Do I Submit a Good Bug Report?</li></ul></li><li>Suggesting Enhancements<ul><li>Before Submitting an Enhancement</li><li>How Do I Submit a Good Enhancement Suggestion?</li></ul></li><li>Your First Code Contribution</li><li>Improving The Documentation</li></ul></li><li>Submitting a Pull Request<ul><li>Dont\u2019s</li></ul></li><li>Style guides<ul><li>Commit Messages</li><li>Code</li></ul></li><li>Join The Project Team</li><li>Attribution</li></ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the md2pdf Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to &lt;&gt;.</p>"},{"location":"contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Latest Documentation (0.0.x.x).</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into. </li> <li>Provide the following information:<ul> <li>OS name and version     If in Linux, include linux distribution and kernel version; and</li> <li>Python version</li> </ul> </li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"contributing/#i-want-to-contribute-legal-notice","title":"Legal Notice","text":"When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license."},{"location":"contributing/#i-want-to-contribute-reporting-bugs","title":"Reporting Bugs","text":""},{"location":"contributing/#i-want-to-contribute-reporting-bugs-before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the Latest Documentation (0.0.x.x). If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li> <p>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</p> </li> <li> <p>Collect information about the bug</p> </li> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul>"},{"location":"contributing/#i-want-to-contribute-reporting-bugs-how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to &lt;&gt;.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for md2pdf, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements-before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the Latest Documentation (0.0.x.x) carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-suggesting-enhancements-how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>You may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. </li> <li>Explain why this enhancement would be useful to most md2pdf users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"contributing/#i-want-to-contribute-your-first-code-contribution","title":"Your First Code Contribution","text":""},{"location":"contributing/#i-want-to-contribute-improving-the-documentation","title":"Improving The Documentation","text":""},{"location":"contributing/#submitting-a-pull-request","title":"Submitting a Pull Request","text":"<p>This is based on Michael Herrmann's gist titled Good PRs are minimal.</p> <p>Every Pull Request (hereinafter referred to as PR) should have one, and only one, unique goal. The PR should make the absolute minimum number of changes that are required to achieve this goal.</p> <p>The fewer things you change, the easier it will be for the team to see what you did, and thus gain confidence that you PR makes sense.</p>"},{"location":"contributing/#submitting-a-pull-request-dont-s","title":"Dont\u2019s","text":"<ul> <li> <p>Changing whitespace unnecessarily, eg. switching tabs and spaces.</p> <p>This leads to huge numbers of unnecessarily changed lines of code.</p> </li> <li> <p>Running a linter not listed in the linters currently used by the project</p> </li> <li>Don't unnecessarily introduce new tools or dependencies. I'm sure you have your    favorites. But don't force them on me or other contributors. Stick to those    that are absolutely required, or come with the language.</li> <li>Obey the same code style as the library: Tabs or spaces, maximum line length,    etc.</li> </ul> <p>In short: Good PRs are minimal. You're very welcome to add several improvements. But please make them in separate PRs.</p>"},{"location":"contributing/#style-guides","title":"Style guides","text":""},{"location":"contributing/#style-guides-commit-messages","title":"Commit Messages","text":"<p>This repository does not enforce a style guide on commits. However, it is highly recommended to be concise and informative when writing commit messages.</p>"},{"location":"contributing/#style-guides-code","title":"Code","text":"<p>This project uses the following linters for the </p>"},{"location":"contributing/#join-the-project-team","title":"Join The Project Team","text":""},{"location":"contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"diary/","title":"Diary","text":"r/offmychest  <p>Written below are rants and lessons I have learned in making this project, and whatnot. Basically, I do not know, I just want to get it out of my chest.</p>"},{"location":"diary/#toc","title":"Table of Contents","text":"<ul><li>KaTeX Support</li></ul>"},{"location":"diary/#katex-support","title":"KaTeX Support","text":"<p>For this project, I planned it to ship with a KaTeX support.</p> <p>I have only found a single python-markdown extension that is also compatible with Weasyprint, and that is markdown-katex by mbarkhau. However, it is so dang slow.</p> <p>From my testing, it takes about 200 seconds (or roughly over 3 mins) to convert a markdown file with around 5-10 formulae in it to a 200 kb PDF file, which is about a kbps. However, that is a shitty metric, as there is an image in there, but you get the point, It is slow as fuck.</p> <p>Now, what I did is attempt to rewrite mbarkhau's implementation of KaTeX for python-markdown. Built it from the ground up, taking motivation from the original project and some other extensions along the way. Heavily rebuilding the logic behind the things that I figured out takes up most of the time.</p> <p>I narrowed it down to two things that slows it down the most: the preprocessor and postprocessor functions. I figured out that the iterator for feeding KaTeX formulae into the KaTeX binary took the longest as the process persists for quite a while on my machine's process monitoring tool. And as such, I made that process multithreaded.</p> <p>Weeks after almost achieving feature-parity with the original project, I encountered an error. It was not of my program, but of the python-markdown's. And as such, I dug up the code that caused that error and extracted that to my program to be able to modify the code and remove the snippet that causes the error in the first place. And of course, that affected the rendering process.</p> <p>There's no more hope. I did something wrong, and I can not track down where it went wrong.</p> <p>Then, it finally hit me. The problem is when I attempted to rebuild the already perfect python-markdown KaTeX implementation. I just need to make it multithreaded. And while I still need to extract the stuff to make it work with the other stuff that I plan to add, I still only need to modify about 20% of the original project. I am so fucking dumb.</p> <p>Or so I thought, two weeks later, after doing just that, it's still slow. And what I mean by slow is that I can run the program, wash the plate I used for eating the leftover cake for like about a minute or two, make myself a cup of coffee, and come back to that damn thing still running! Luckily, I narrowed it down to the very root cause of it all: the logic that searches for the KaTeX binary in the machine.</p> <p>I do not know how or why the heck is it so slow. In any case, I replaced it with a shutil's implementation of <code>which</code>, modified to work with the extension. And fortunately, it worked! The logic still looks the same as the old one, but the damn thing runs from 30 secs down to sub-five seconds, depending where the binary is at. Like, whaaaaaat?!?!</p> <p>What is the moral of the story then? That someone's code might actually be the best solution for the problem. But if it does not work, then do not try to rebuild it from the ground up. See first if you can modify some parts of it to work with your problem. Then if it does not work, then proceed to rebuilding it. As often times, that solution might be the best solution for that exact problem, but not for your own, exact problem.</p> <p>Or is that it?</p> <p>Maybe I just wanted to rant about the stupid weeks I have wasted for this little thing to fucking work? Or is it because I just wanted to flex how much I have optimized a single thing?</p> <p>I do not fucking know, but I sure did flex'd to my friends about how I \"optimized\" a program to run 40x faster. I mean, where is the lie?</p> <p>Now, where am I again? Oh, right, KaTeX support. Yay, finally added! UwU</p>"},{"location":"faq/","title":"Faq","text":"FAQ"},{"location":"faq/#toc","title":"Table of Contents","text":"<ul><li>Is this application safe?</li><li>What are your intentions in making this application?</li><li>Who are you?</li></ul>"},{"location":"faq/#is-this-application-safe","title":"Is this application safe?","text":"TL;DR: First of all, safe from what aspect, bruv? Considering that you are asking this, probably not. Is this application safe for my computer? TL;DR: Yes, but not really. Safe enough to put a 99.99% safety guarantee on it, air commercials of it, and not get sued on the grounds of false advertisement. <p> No software is ever safe, and there will never be. Unless if we, for some mysterious and divine reason, gain the ability to prove if a program halts or not, which in this universe is impossible (relevant link: Halting problem). </p> <p> Enough of explaining the philosophical implications of this problematic question, and let us go to the real meat of the discussion. No, I can not assure you, as the developer of this application, that this application is safe. It is like asking if I poisoned your food; regardless of if I did it or not, I will dutifully deny the allegation, duh. Inquired you did, now trust me. Make of that what you will, but I am here to chase clout and make money out of it, not to compromise machines. </p> <p> Well, with all that said, I also made it for personal use. And for that, I have to make it at the very least usable to the extent that it would not compromise the host machine that it is running on. </p> <p> Don't trust me? The application is open-sourced. Every packaged application downloaded from the official site and Github repository is built from the same source as available on the official Github repository. If you know how to read the source code, you are free to do so, and inspect it. If you did do so, please hunt down some bugs for me. Much appreciated UwU </p> <p> To end this answer, well... I mean, you could run the thing on a virus checker. Although, what might be an innocuous yet insecure system API call might be flagged as a suspicious activity. Not that I am aware of anything of that sort in my application, but I think that that will suffice as an example. </p>"},{"location":"faq/#what-are-your-intentions-in-making-this-application","title":"What are your intentions in making this application?","text":"TL;DR: It's a hobby of mine. It is not driven by money or ill intentions. Inquired you did, now trust me. <p> This started out as a hobby project. To pass time, and live out the rest of my days as a virgin NEET and a total social recluse. Assuming that you can see this site right now, it has grew into this large and popular project that it has become. </p> <p> My intentions however are still the same as it was months ago. However, I have a side goal in mind right now: to attain popularity in the open source scene, enough to get me enough freelancing work and earn money. </p> <p> Yes, that is it, really. I am in it for the money, but the development of this application is but money-driven. I mean, I would very much appreciate it if you could donate money or a little bit of your time to this little endeavour of mine, or commission me to do some work for you. </p>"},{"location":"faq/#who-are-you","title":"Who are you?","text":"TL;DR: That's a creepy thing to ask dude, I'm a teenager. \\s <p> Hello, I am whi_ne, short for whitespace_negative. 17 at the time of writing. I am a python and a web developer, albeit shitty at both of them. I also do some freelance work. Nice to meet ya! </p> <p> Yes, I use an alias; personal branding is dead. I also want to stay anonymous. However, my pics on multiple guys' DMs suggests otherwise. And yes, please do not dig up dirt on me, I will let you know everything there is to know about me. </p>"},{"location":"latest-bump/","title":"Latest bump","text":"Latest Version Bump"},{"location":"latest-bump/#0000-alpha0","title":"0.0.0.0-alpha.0","text":"<p>&lt;font color=\""},{"location":"latest-commit/","title":"Latest commit","text":"Latest Commit"},{"location":"latest-commit/#summary","title":"Summary","text":"<p>Yet 'nother fucking oopsies...</p>"},{"location":"latest-commit/#changes","title":"Changes","text":""},{"location":"latest-release-notes/","title":"Latest release notes","text":"0.0.0.0-alpha.0"},{"location":"latest-release-notes/#description","title":"Description","text":"<p>&lt;font color=\""},{"location":"license/","title":"License","text":"MIT LICENSE <p>Copyright for portions of project md2pdf are held by [Julien Maupetit, Github account jmaupetit owner, 2016-2021] as part of project md2pdf, by [c4ffein, Github account c4ffein owner, 2021-2022] as part of project txt2pdf, by [Simon Sapin, Github account SimonSapin owner, 2011-2023] as part of project WeasyPrint, by [Pallets, Github account pallets owner, 2014-2022] as part of project click, by [mbarkhau, Github account mbarkhau owner, 2019-2021] as part of project markdown-katex, by [Python-Markdown, Github account Python-Markdown owner, 2007-2023] as part of project markdown, by [whi_ne, Github account whinee owner, 2021-2022] as part of project MangDL, and by [whi_ne, Github account whinee owner, 2022] as part of project YAMHL.</p> <p>All other copyright for project md2pdf are held by [Github Account whinee Owner, 2023].</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"notes-to-self/","title":"Notes to self","text":"Notes to Self  <p>Look, whi_ne, I have written this for you.</p> <p>Please, do I humbly plead you, do not ever forgot to read this before pushing changes to Github.</p>"},{"location":"notes-to-self/#toc","title":"Table of Contents","text":"<ul><li>Versioning System<ul><li>Version Bump Guides</li></ul></li><li>Changelog</li><li>Documentation</li></ul>"},{"location":"notes-to-self/#versioning-system","title":"Versioning System","text":"<p>Look, you have made your own versioning system based off semver 2.0.0. Use it properly.</p> <p>Given a version number <code>user</code>.<code>dev</code>.<code>minor</code>.<code>patch</code>, increment the:</p> <ul> <li><code>user</code> version when you make any changes to the user interface/experience. This does not include improvements on loading times, despite being well within the user experience umbrella.</li> <li><code>dev</code> version when you make incompatible API changes,</li> <li><code>minor</code> version when you add functionality in a backwards compatible manner, and</li> <li><code>patch</code> version when you make backwards compatible bug fixes.</li> </ul> <p>If in doubt, please DO visit semver.org.</p>"},{"location":"notes-to-self/#versioning-system-version-bump-guides","title":"Version Bump Guides","text":"<ul> <li>ANY change in the user interface/experience SHALL induce a <code>user</code> version bump.</li> <li>ANY change in the schema shall induce a <code>dev</code> version bump.</li> <li>ANY change in the documentation SHALL NOT induce any version bump.</li> </ul> <pre><code>flowchart TD\n    VB([Version Bump])\n        VB --&gt; |\"prerelease identifier (pi)\"| e_pr{existing `pi`}\n            e_pr --&gt; |none| bprv(\"bump prerelease version (pv)\")\n                bprv --&gt; ba(bump `pi` to `alpha`)\n                ba --&gt; bp([bump `patch`])\n            e_pr --&gt; |alpha| bb(bump to `beta`)\n                bb --&gt; r0([reset version/s below it to `0` or `none`])\n            e_pr --&gt; |beta| br(bump to `rc`) --&gt; r0\n            e_pr --&gt; |rc| rn(reset to `none`) --&gt; r0\n        VB --&gt; |others| bsv(bump specified version) --&gt; r0</code></pre>"},{"location":"notes-to-self/#changelog","title":"Changelog","text":"<p>As used in the changelog, the following types of changes shall have the following implications, of which, their allowed version bumps should be everything, unless explicably stated otherwise:</p> <ul> <li><code>Added</code> for new features.<ul> <li>user</li> <li>dev</li> <li>minor</li> </ul> </li> <li><code>Changed</code> for changes in existing functionality.<ul> <li>user</li> <li>dev</li> </ul> </li> <li><code>Deprecated</code> for soon-to-be removed features.<ul> <li>patch</li> </ul> </li> <li><code>Removed</code> for now removed features.<ul> <li>user</li> <li>dev</li> </ul> </li> <li><code>Fixed</code> for any bug fixes.</li> <li><code>Security</code> in case of vulnerabilities.</li> </ul> <p>Mind the human as you do with the robot. Format the changelog properly. Example format:</p> <pre><code>## 69.4.2.0 (minor bump)\n\nSprinkle a description here.\n\n### Added\n\n- I added a cool feature.\n\n### Deprecated\n\n- This feature will be deprecated 'cuz I can't maintain it anymore.\n\n### Security\n\n- Fixed stuff where the anilist token is leaked to everyone using this app.\n</code></pre>"},{"location":"notes-to-self/#documentation","title":"Documentation","text":"<p>The documentation system is a custom solution.</p> <p>If the documentation generator fails, check the traceback. It is commonly due to errors in the code and not the generator itself.</p> <p>Do not blame the shitty generator you wrote. You might just have written a faulty code.</p>"},{"location":"terms%20of%20usage/","title":"Terms of usage","text":"Terms of Usage and Disclaimers"},{"location":"terms%20of%20usage/#toc","title":"Table of Contents","text":"<ul><li>Defined Terms</li><li>Terms of Usage</li><li>Disclaimer<ul><li>Revisions and Errata</li><li>DMCA and Copyright Infringements</li><li>The Developer</li></ul></li></ul>"},{"location":"terms%20of%20usage/#defined-terms","title":"Defined Terms","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p> <p>As used in this Disclaimer, the following terms SHALL have the following meanings (such meanings to be equally applicable to both the singular and plural forms of the terms defined unless explicably mentioned otherwise):</p> <ul> <li> <p>Developer hereby means the person who has developed the Project going by the alias of \"whi~nyaan!\" in the internet, username of \"whinee\" in \"Github\", username of \"whi_ne#4783\" in \"Discord\" and rightful owner of the electronic mail address \"whinyaan@protonmail.com\", only meant to be used in singular form</p> </li> <li> <p>Project hereby means the Open Source Project called \"md2pdf\" developed by the Developer, only meant to be used in singular form</p> </li> <li> <p>Website hereby means a set of interconnected webpages, prepared and maintained as a collection of information for the Project by the Developer, located at m2p.whinyaan.xyz, only meant to be used in singular form; and</p> </li> <li> <p>User hereby means the person who uses this Project and/or Website, regardless of their intentions and attributes including, but not limited to the following:</p> <p>age, body size, caste, citizenship, civil status, disability, education, ethnicity, familial status, gender expression, gender identity, genetic information, immigration status, level of experience, nationality, personal appearance, pregnancy, race, religion, sex characteristics, sexual orientation, sexual identity, socio-economic status, tribe, and veteran status</p> </li> </ul>"},{"location":"terms%20of%20usage/#terms-of-usage","title":"Terms of Usage","text":"<p>As stated in the license agreement, under no circumstance SHALL the Developer of this Project have any liability to the User for any loss or damage of any kind incurred as a result of the use of this Project, even if the Developer or an authorize representative of this Project and/or Website has been notified, orally or written, of the possibility of such damage including, but not limited to the following:</p> <ul> <li> <p>Criminal charges due to accessing illegal content where it is banned or prohibited by law; and</p> </li> <li> <p>Damage to device due to usage of the Project and/or Website in said device</p> </li> </ul> <p>Some jurisdiction does not allow limitations on implied warranties or limitations of liability for incidental damages, these limitations MAY not apply to you.</p> <p>The needy Developer also REQUIRES the Users to pat said developer 3 (three) times a day. Failure to do so MUST revoke the User's rights to use the app.</p> <p>These Terms of Usage MAY change at any time for any and no reason and it is up to the Users to check for updates from time to time, which means that by no means SHALL the Developer be liable for the User's failure to check the Terms of Usage at a regular basis.</p> <p>By using the Project and/or the Website, the User agrees and confirms to the license agreement and the Terms of Usage.</p>"},{"location":"terms%20of%20usage/#disclaimer","title":"Disclaimer","text":"<p>The Developer only intends to use this Project only for educational purposes.</p>"},{"location":"terms%20of%20usage/#disclaimer-revisions-and-errata","title":"Revisions and Errata","text":"<p>The materials and resources in this Website and the Project MAY include technical, typographical, or photographic errors. The Developer does not promise that any of the materials in this Website and the Project are accurate, complete, or current. The said Developer MAY change the materials contained on its Website at any time without notice. The Developer does not make any commitment to update the materials.</p>"},{"location":"terms%20of%20usage/#disclaimer-dmca-and-copyright-infringements","title":"DMCA and Copyright Infringements","text":"<p>The contents served by the Project is publicly accessible through the Internet. In case of copyright infringement, please direct the complaints, claims, and possible criminal charges against to the respective file hosts and content providers, not to the Project nor to the Developer, as the Developer is not affiliated with them, at any way, shape or form.</p> <p>The Project is a program that serves contents like a normal browser do through scraping 3rd-party websites that are publicly accessible via any regular web browser, however it does less requests than a normal browser would, and is sophisticated enough to serve the content how the Developer would want to. It is the responsibility of the Users to avoid any actions that might violate the laws governing their locality.</p>"},{"location":"terms%20of%20usage/#disclaimer-the-developer","title":"The Developer","text":"<p>The Project is created in good faith that this will only serve an educational purpose for the Developer and the Users and will only be used for that said purpose.</p> <p>By no means harassing the Developer including, but not limited to the following, is legal nor ethically and morally correct:</p> <ul> <li> <p>Exploiting the undisclosed personal information of the Developer against them, possibly accessed through illegal means, including, but not limited to the following:</p> <ul> <li> <p>Physical/Online Stalking</p> </li> <li> <p>Hacking; and</p> </li> <li> <p>Social Engineering</p> </li> </ul> </li> <li> <p>Sending threatening messages, mentioning doing physical harm to the Developer or not, attempts to morally degrade the said Developer, including, but not limited to the following ways:</p> <ul> <li> <p>Through social media platforms, including but not limited to Discord, Youtube, and Facebook</p> </li> <li> <p>Through e-mail; and</p> </li> <li> <p>Through physical mail</p> </li> </ul> </li> </ul> <p>The Developer will act legally against those who have done anything illegal against the said Developer, including, but not limited to the following above.</p> <p>For any concerns regarding the legality of the Project and/or Websites, begin by creating a new issue or through emailing me at whinyaan@protonmail.com or contacting me in Discord at whi_ne#4783.</p>"},{"location":"docs/","title":"Index","text":"All Version  <ul> <li>Version 0.x.x.x</li> </ul>"},{"location":"docs/0/","title":"Index","text":"Version 0.x.x.x  <ul> <li>Version 0.0.x.x</li> </ul>"},{"location":"docs/0/0/","title":"Index","text":"0.0.x.x  <ul> <li>API Documentation</li> <li>For contributors</li> </ul>"},{"location":"docs/0/0/installation/","title":"Installation","text":"Installating md2pdf"},{"location":"docs/0/0/installation/#toc","title":"Table of Contents","text":"<ul><li>Windows</li><li>Mac</li><li>Linux<ul><li>Arch</li></ul></li></ul>"},{"location":"docs/0/0/installation/#windows","title":"Windows","text":"<ol> <li> <p>Copy the following text:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\niex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> </li> <li> <p>Press <code>Win</code>. An interface should pop up as shown below:</p> <p></p> </li> <li> <p>Search for settings by typing \"<code>Settings</code>\" in the text field as shown below:</p> <p></p> <p>Press <code>Enter</code>.</p> </li> <li> <p>A window should pop up as shown below:</p> <p></p> <p>Press \"<code>Apps</code>\" in the selection below.</p> </li> <li> <p>You should be redirected to \"<code>Apps &amp; Features</code>\" as shown below:</p> <p></p> <p>Below the subtitle \"<code>Apps &amp; Features</code>\", press the hyperlink \"<code>App execution aliases</code>\".</p> </li> <li> <p>You should be redirected to \"<code>App execution aliases</code>\" as shown below:</p> <p></p> <p>Toggle the \"<code>App installer</code>\" for both \"<code>python.exe</code>\" and \"<code>python3.exe</code>\". Exit the settings app.</p> </li> <li> <p>Press <code>Windows</code> + <code>R</code> (Press <code>Windows</code> and <code>R</code> keys simultaneously)</p> </li> <li> <p>A window with a title <code>Run</code> should appear. Focus to the said window in the <code>Open:</code> text field by hovering the mouse towards the said text field and left-clicking the mouse and type <code>powershell</code> as shown below:</p> <p></p> </li> <li> <p>Press <code>Ctrl</code> + <code>Shift</code> + <code>Enter</code> (Press <code>Ctrl</code>, <code>Shift</code>, and <code>Enter</code> keys simultaneously).</p> </li> <li> <p>A window with a title <code>User Account Control</code> should appear as shown below:</p> <p></p> </li> <li> <p>Focus to the said window and press the <code>Yes</code> button by hovering the mouse towards the said button and left-clicking the mouse. A window named <code>Administrator: Windows Powershell</code> should pop-up.</p> </li> <li> <p>Focus to the window named <code>Administrator: Windows Powershell</code> window by hovering the mouse towards the said window and left-clicking the mouse. Then, press <code>Ctrl</code> + <code>V</code> (Press <code>Ctrl</code> and <code>V</code> keys simultaneously).</p> <p>If the window <code>Administrator: Windows Powershell</code> seems to hang up, focus to said window by hovering the mouse towards the said window and left-clicking the mouse, then press <code>Enter</code> five times every minute or so until something happens.</p> </li> <li> <p>Restart your computer, then login to the user account to which you have done the above instructions at.</p> </li> <li> <p>Copy the following text:</p> <pre><code>choco install nodejs -y\nnpm install katex\n</code></pre> </li> <li> <p>Repeat step 7-12.</p> </li> <li> <p>[RECOMMENDED] Use Python environment</p> <p>It is recommended to use a Python environment to isolate the dependencies installed to the main Python installation which other programs might use, as this will reduce the chance of incompatible dependency version collisions.</p> <p>Change directory to where you want to put the Python environment, by replacing the <code>&lt;dir&gt;</code> in the following text to your desired directory in your machine, and copy the text\"</p> <pre><code>cd &lt;dir&gt;\npython3 -m venv pyenv\n.\\pyenv\\Scripts\\activate\n</code></pre> <p>Repeat step 12.</p> </li> <li> <p>Copy the following text:</p> <pre><code>python3 -m pip install w{{pip}}\n</code></pre> <p>And you have installed </p> </li> </ol>"},{"location":"docs/0/0/installation/#mac","title":"Mac","text":"<ol> <li> <p>Open your preferred terminal and run the following command:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n</code></pre> </li> <li> <p>Next, for OS X 10.13 (High Sierra) or younger, run the following command:</p> <pre><code>echo 'export PATH=\"/usr/local/opt/python/libexec/bin:$PATH\"' &gt;&gt; ~/.profile\n</code></pre> </li> </ol> <p>And for OS X 10.12 (Sierra) or older, use the following command instead: <pre><code>echo 'export PATH=/usr/local/bin:/usr/local/sbin:$PATH' &gt;&gt; ~/.profile\n</code></pre></p> <ol> <li> <p>Afterwards, install the rest of the prerequisites by running the following command: <pre><code>brew install node\n</code></pre></p> </li> <li> <p>Then, install katex with npm by running the following command:</p> <pre><code>npm install katex\n</code></pre> </li> </ol>"},{"location":"docs/0/0/installation/#linux","title":"Linux","text":""},{"location":"docs/0/0/installation/#linux-arch","title":"Arch","text":"<ol> <li>Open your preferred terminal and run the following command: <pre><code>sudo pacman -Syyu --noconfirm curl\n</code></pre></li> </ol>"},{"location":"docs/0/0/markdown/","title":"Markdown","text":"Markdown Implementation"},{"location":"docs/0/0/markdown/#toc","title":"Table of Contents","text":"<ul><li>Base Implementation</li><li>Extended Syntax<ul><li>Math Expression</li></ul></li></ul>"},{"location":"docs/0/0/markdown/#base-implementation","title":"Base Implementation","text":"<p>md2pdf uses <code>Python-Markdown/markdown</code> to convert Markdown to HTML which, apparently, is a Python implementation of John Gruber's <code>markdown</code></p> <p>According to the cited program's documentation, the specification is implemented as close to the reference specification as possible. In this link, you will see difference of the Python implementation and the original implementation.</p> <p>And oh yes, this is an arguably messy implementation of Markdown, as opposed to Commonmark Markdown. But we got to make do of what we have, no? baka baka :3</p>"},{"location":"docs/0/0/markdown/#extended-syntax","title":"Extended Syntax","text":"<p>md2pdf extended the base implementation, and hereinunder are the details.</p>"},{"location":"docs/0/0/markdown/#extended-syntax-math-expression","title":"Math Expression","text":"<p>KaTeX expressions are supported in this program. You just need to surround it in a code block, with the language set as <code>math</code>. An example of this is the following:</p> <pre><code>```math\n% \\f is defined as #1f(#2) using the macro\n\\f\\relax{x} = \\int_{-\\infty}^\\infty\n    \\f\\hat\\xi\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n</code></pre> <p>This link lists all of the supported functions in KaTeX, grouped logically.</p>"},{"location":"docs/0/0/api/","title":"src","text":""},{"location":"docs/0/0/api/#sub-modules","title":"Sub-modules","text":"<ul> <li>src.cli</li> <li>src.globals</li> <li>src.info</li> <li>src.md_pp</li> <li>src.pdfgenerator</li> <li>src.utils</li> </ul>"},{"location":"docs/0/0/api/cli/","title":"src.cli","text":"Functions hmc <pre><code>(raw_HTML:\u00a0str, HTML_path:\u00a0str, raw_MD:\u00a0str, MD_path:\u00a0str, hf:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>HTML or Markdown chooser.</p> <p>Return first argument that is not <code>None</code> and convert it into HTML, if it is not already.</p> Args: <ul> <li>raw_HTML (<code>str</code>): Raw HTML string.</li> <li>HTML_path (<code>str</code>): Path to HTML file.</li> <li>raw_MD (<code>str</code>): Raw Markdown string.</li> <li>MD_path (<code>str</code>): Path to Markdown file.</li> </ul> Returns: <p><code>string</code>: Raw HTML string.</p> mc <pre><code>(raw_MD:\u00a0str, MD_path:\u00a0str, hf:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None) \u2011&gt; str\u00a0|\u00a0None\n</code></pre> <p>Markdown chooser.</p> <p>Return first argument that is not <code>None</code> and convert it into HTML.</p> Args: <ul> <li>raw_MD (<code>str</code>): Raw Markdown string.</li> <li>MD_path (<code>str</code>): Path to Markdown file.</li> </ul> Returns: <p><code>string</code>: Raw HTML string.</p>"},{"location":"docs/0/0/api/globals/","title":"src.globals","text":""},{"location":"docs/0/0/api/info/","title":"src.info","text":"Variables <p><code>CHOLDER</code> HTML text of copyright holders of this project</p> <p><code>PROJECT_NAME</code> Project's name</p> <p><code>SVER</code> The current version of the project, compliant with the semver.</p> <p>This project uses a modified semver. For more information, visit this link.</p> <p><code>VARIANT</code> The application variant</p> <p>This is useful for debugging, and for initializing the application's configuration. Following are the allowed variants:</p> <ul> <li><code>installable</code>: for when the application is packed as an installable application</li> <li><code>package</code>: for when the application is published on PyPi (as a Python Library)</li> <li><code>portable</code>: for when the application is packed as a portable application</li> </ul> <p><code>VLS</code> The current version of the project as a list.</p> <p>The list consists of 6 integers, which represent the following:     - User     - Dev     - Minor     - Patch     - Prerelease Identifier         The prerelease identifier number corresponds to the following values:             0: alpha             1: beta             2: release candidate or rc             3: none     - Prerelease Version</p>"},{"location":"docs/0/0/api/md_pp/","title":"src.md_pp","text":"Functions get_bin_cmd <pre><code>() \u2011&gt; list[str]\n</code></pre> htmlsvg2img <pre><code>(html:\u00a0str) \u2011&gt; str\n</code></pre> katex2html <pre><code>(marker:\u00a0str, tex:\u00a0str) \u2011&gt; tuple[str,\u00a0str]\n</code></pre> make_marker_id <pre><code>(text:\u00a0str) \u2011&gt; str\n</code></pre> mdblocks_katex2img <pre><code>(mdblocks:\u00a0dict[str,\u00a0str]) \u2011&gt; list[typing.Any]\n</code></pre> Classes FencedBlockPostprocessor <pre><code>(md:\u00a0str, ext:\u00a0src.md_pp.WhExtension)\n</code></pre> <p>Postprocessors are run after the ElementTree it converted back into text.</p> <p>Each Postprocessor implements a \"run\" method that takes a pointer to a text string, modifies it as necessary and returns a text string.</p> <p>Postprocessors must extend markdown.Postprocessor.</p> Ancestors (in MRO) <ul> <li>markdown.postprocessors.Postprocessor</li> <li>markdown.util.Processor</li> </ul> Methods run <pre><code>(self, text:\u00a0str) \u2011&gt; str\n</code></pre> <p>Subclasses of Postprocessor should implement a <code>run</code> method, which takes the html document as a single text string and returns a (possibly modified) string.</p> FencedBlockPreprocessor <pre><code>(md:\u00a0str, ext:\u00a0src.md_pp.WhExtension)\n</code></pre> <p>Preprocessors are run after the text is broken into lines.</p> <p>Each preprocessor implements a \"run\" method that takes a pointer to a list of lines of the document, modifies it as necessary and returns either the same pointer or a pointer to a new list.</p> <p>Preprocessors must extend markdown.Preprocessor.</p> Ancestors (in MRO) <ul> <li>markdown.preprocessors.Preprocessor</li> <li>markdown.util.Processor</li> </ul> Methods run <pre><code>(self, lines:\u00a0list[str]) \u2011&gt; list[str]\n</code></pre> <p>Each subclass of Preprocessor should override the <code>run</code> method, which takes the document as a list of strings split by newlines and returns the (possibly modified) list of lines.</p> WhExtension <pre><code>(**kwargs:\u00a0dict[str,\u00a0typing.Any])\n</code></pre> <p>Base class for extensions to subclass. </p> <p>Initiate Extension and set up configs.</p> Ancestors (in MRO) <ul> <li>markdown.extensions.Extension</li> </ul> Methods extendMarkdown <pre><code>(self, md:\u00a0markdown.core.Markdown) \u2011&gt; None\n</code></pre> <p>Add the various processors and patterns to the Markdown Instance.</p> <p>This method must be overridden by every extension.</p> <p>Keyword arguments:</p> <ul> <li> <p>md: The Markdown instance.</p> </li> <li> <p>md_globals: Global variables in the markdown module namespace.</p> </li> </ul> reset <pre><code>(self) \u2011&gt; None\n</code></pre>"},{"location":"docs/0/0/api/pdfgenerator/","title":"src.pdfgenerator","text":"Functions calc_margin <pre><code>(margin:\u00a0list[float], header_height:\u00a0int, footer_height:\u00a0int) \u2011&gt; str\n</code></pre> get_element <pre><code>(boxes, element)\n</code></pre> <p>Given a set of boxes representing the elements of a PDF page in a DOM-like way, find the box which is named <code>element</code>.</p> <p>Notes: - When Weasyprint renders an html into a PDF, it goes though several intermediate steps. Here, in this class, we deal mostly with a box representation: 1 <code>Document</code> have 1 <code>Page</code> or more, each <code>Page</code> 1 <code>Box</code> or more. Each box can contain other box. Hence the recursive method <code>get_element</code> for example. For more, visit the following links:     - https://weasyprint.readthedocs.io/en/stable/hacking.html#dive-into-the-source     - https://weasyprint.readthedocs.io/en/stable/hacking.html#formatting-structure</p> margin_preprocessor <pre><code>(margin:\u00a0list[str]) \u2011&gt; list[float]\n</code></pre> Classes PDFGenerator <pre><code>(*, main_html:\u00a0str, stylesheets:\u00a0list[str], first_page_header_html=builtins.str, first_page_footer_html=builtins.str, header_html:\u00a0str, footer_html:\u00a0str, base_url:\u00a0str, size:\u00a0str, margin:\u00a0list[str])\n</code></pre> <p>Generate a PDF out of a rendered template, with the possibility to integrate nicely a header and a footer if provided.</p> <p>Notes: - Warning: the logic of this class relies heavily on the internal Weasyprint API. This snippet was written at the time of the release 47, it might break in the future. - This generator draws its inspiration and, also a bit of its implementation, from this discussion in the library github issues: https://github.com/Kozea/WeasyPrint/issues/92 - Hello from whi_ne (https://github.com/whinee) in the past, modified slightly at the time of release 51. And yes, I struggled adding my own features.</p> <p>Initialize PDF Generator.</p> <p>Notes: - The <code>size</code> and <code>margin</code> arguments are applied to the PDF like CSS does. See https://developer.mozilla.org/en-US/docs/Web/CSS/@page/size and https://developer.mozilla.org/en-US/docs/Web/CSS/margin#syntax respectively for more details.</p> Args: <ul> <li>main_html (<code>str</code>): An HTML file (most of the time a template rendered into a string) which represents the core of the PDF to generate.</li> <li>first_page_header_html (<code>str</code>): Optional HTML for the first page's header.</li> <li>first_page_footer_html (<code>str</code>): Optional HTML for the first page's footer.</li> <li>header_html (<code>str</code>): Optional HTML for header.</li> <li>footer_html (<code>str</code>): Optional HTML for footer.</li> <li>base_url (<code>str</code>): An absolute url to the page which serves as a reference to Weasyprint to fetch assets, required to get our media.</li> <li>stylesheets (<code>list[str]</code>): Optional paths to stylesheets to be used for rendering the PDF.</li> <li>size (<code>str</code>): CSS size property applied directly to each page.</li> <li>margin (<code>str</code>): CSS margin property applied directly to each page.</li> </ul> Methods render_pdf <pre><code>(self) \u2011&gt; bytes\n</code></pre> <p>Return the rendered PDF.</p> Returns: <p><code>bytes</code>: The rendered PDF.</p>"},{"location":"docs/0/0/api/utils/","title":"src.utils","text":""},{"location":"docs/0/0/api/utils/#super-module","title":"Super-module","text":"<ul> <li>src</li> </ul>"},{"location":"docs/0/0/api/utils/#sub-modules","title":"Sub-modules","text":"<ul> <li>src.utils.base_cli</li> <li>src.utils.base_exc</li> <li>src.utils.cd</li> <li>src.utils.cfg</li> <li>src.utils.exceptions</li> <li>src.utils.style</li> <li>src.utils.types</li> <li>src.utils.utils</li> </ul>"},{"location":"docs/0/0/api/utils/base_cli/","title":"src.utils.base_cli","text":"Functions command <pre><code>(group:\u00a0src.utils.base_cli.Group) \u2011&gt; Callable[[Callable[...,\u00a0Any]],\u00a0Callable[...,\u00a0Any]]\n</code></pre> <p>Wrapper for click commands.</p> Args: <ul> <li>group (<code>Group</code>): Command group of the command to be under.</li> </ul> Returns: <ul> <li><code>Callable[[Callable[..., Any]], Callable[..., Any]]</code></li> </ul> command_group <pre><code>(name:\u00a0Union[str,\u00a0Callable[...,\u00a0Any],\u00a0ForwardRef(None)]\u00a0=\u00a0None, **attrs:\u00a0Any) \u2011&gt; src.utils.base_cli.Group\n</code></pre> custom_command <pre><code>(name:\u00a0Union[str,\u00a0Callable[...,\u00a0Any],\u00a0ForwardRef(None)]\u00a0=\u00a0None, cls:\u00a0Optional[Type[src.utils.base_cli.Command]]\u00a0=\u00a0None, **attrs:\u00a0Any) \u2011&gt; Union[src.utils.base_cli.Command,\u00a0Callable[...,\u00a0src.utils.base_cli.Command]]\n</code></pre> de_rcfg <pre><code>() \u2011&gt; src.utils.cd.CustomDict\n</code></pre> <p>Return parsed configuration file, fetched from the CFLOP.</p> Returns: <p><code>dict[Any, Any]</code>: description</p> de_wcfg <pre><code>(value:\u00a0dict[typing.Any,\u00a0typing.Any]\u00a0|\u00a0list[typing.Any]) \u2011&gt; None\n</code></pre> <p>Write given value to the configuration file, fetched from the CFLOP.</p> Args: <ul> <li>value (<code>dict[Any, Any] | list[Any]</code>): dictionary to overwrite the configuration file, fetched from the CFLOP.</li> </ul> get_stg <pre><code>(path:\u00a0str, **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; Optional[Any]\n</code></pre> init <pre><code>(idx:\u00a0int) \u2011&gt; None\n</code></pre> select <pre><code>(message:\u00a0str, choices:\u00a0Union[Sequence[str\u00a0|\u00a0questionary.prompts.common.Choice\u00a0|\u00a0dict[str,\u00a0Any]],\u00a0dict[str,\u00a0Any]], default:\u00a0Optional[Any]\u00a0=\u00a0None, instruction:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, qmark:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, pointer:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, style:\u00a0Optional[prompt_toolkit.styles.base.BaseStyle]\u00a0=\u00a0None, show_selected:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None, ret_err:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None, **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; tuple[bool,\u00a0typing.Any]\n</code></pre> Classes Command <pre><code>(name:\u00a0str\u00a0|\u00a0None, context_settings:\u00a0Optional[Dict[str,\u00a0Any]]\u00a0=\u00a0None, callback:\u00a0Optional[Callable[...,\u00a0Any]]\u00a0=\u00a0None, params:\u00a0Optional[List[ForwardRef('Parameter')]]\u00a0=\u00a0None, help:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, epilog:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, short_help:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, options_metavar:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0'[OPTIONS]', add_help_option:\u00a0bool\u00a0=\u00a0True, no_args_is_help:\u00a0bool\u00a0=\u00a0False, hidden:\u00a0bool\u00a0=\u00a0False, deprecated:\u00a0bool\u00a0=\u00a0False)\n</code></pre> <p>Commands are the basic building block of command line interfaces in Click.  A basic command handles command line parsing and might dispatch more parsing to commands nested below it.</p> <p>:param name: the name of the command to use unless a group overrides it. :param context_settings: an optional dictionary with defaults that are                          passed to the context object. :param callback: the callback to invoke.  This is optional. :param params: the parameters to register with this command.  This can                be either :class:<code>Option</code> or :class:<code>Argument</code> objects. :param help: the help string to use for this command. :param epilog: like the help string but it's printed at the end of the                help page after everything else. :param short_help: the short help to use for this command.  This is                    shown on the command listing of the parent command. :param add_help_option: by default each command registers a <code>--help</code>                         option.  This can be disabled by this parameter. :param no_args_is_help: this controls what happens if no arguments are                         provided.  This option is disabled by default.                         If enabled this will add <code>--help</code> as argument                         if no arguments are passed :param hidden: hide this command from help outputs.</p> <p>:param deprecated: issues a message indicating that                          the command is deprecated.</p> <p>.. versionchanged:: 8.1     <code>help</code>, <code>epilog</code>, and <code>short_help</code> are stored unprocessed,     all formatting is done when outputting help text, not at init,     and is done even if not using the <code>@command</code> decorator.</p> <p>.. versionchanged:: 8.0     Added a <code>repr</code> showing the command name.</p> <p>.. versionchanged:: 7.1     Added the <code>no_args_is_help</code> parameter.</p> <p>.. versionchanged:: 2.0     Added the <code>context_settings</code> parameter.</p> Ancestors (in MRO) <ul> <li>click.core.Command</li> <li>click.core.BaseCommand</li> </ul> Methods get_help_option <pre><code>(self, ctx:\u00a0click.core.Context) \u2011&gt; Optional[click.core.Option]\n</code></pre> <p>Returns the help option object.</p> Group <pre><code>(name:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None, commands:\u00a0Union[Dict[str,\u00a0click.core.Command],\u00a0Sequence[click.core.Command],\u00a0ForwardRef(None)]\u00a0=\u00a0None, **attrs:\u00a0Any)\n</code></pre> <p>A group allows a command to have subcommands attached. This is the most common way to implement nesting in Click.</p> <p>:param name: The name of the group command. :param commands: A dict mapping names to :class:<code>Command</code> objects.     Can also be a list of :class:<code>Command</code>, which will use     :attr:<code>Command.name</code> to create the dict. :param attrs: Other command arguments described in     :class:<code>MultiCommand</code>, :class:<code>Command</code>, and     :class:<code>BaseCommand</code>.</p> <p>.. versionchanged:: 8.0     The <code>commmands</code> argument can be a list of command objects.</p> Ancestors (in MRO) <ul> <li>click.core.Group</li> <li>click.core.MultiCommand</li> <li>click.core.Command</li> <li>click.core.BaseCommand</li> </ul> Methods command <pre><code>(self, *args:\u00a0Any, **kwargs:\u00a0Any) \u2011&gt; Union[Callable[[Callable[...,\u00a0Any]],\u00a0src.utils.base_cli.Command],\u00a0src.utils.base_cli.Command]\n</code></pre> <p>A shortcut decorator for declaring and attaching a command to the group. This takes the same arguments as :func:<code>command</code> and immediately registers the created command with this group by calling :meth:<code>add_command</code>.</p> <p>To customize the command class used, set the :attr:<code>command_class</code> attribute.</p> <p>.. versionchanged:: 8.1     This decorator can be applied without parentheses.</p> <p>.. versionchanged:: 8.0     Added the :attr:<code>command_class</code> attribute.</p> cao <pre><code>(group:\u00a0src.utils.base_cli.Group)\n</code></pre> <p>Returns wrappers for a click command evaluated from the given arguments.</p> Args: <ul> <li>group (<code>Group</code>): Command group of the command to be under.</li> </ul> Methods arguments <pre><code>(self) \u2011&gt; Callable[[Callable[...,\u00a0Any]],\u00a0Callable[...,\u00a0Any]]\n</code></pre> <p>The arguments wrapper.</p> Returns: <p><code>Callable[[Callable[..., Any]], Callable[..., Any]]</code></p> command <pre><code>(self) \u2011&gt; Callable[[Callable[...,\u00a0Any]],\u00a0Callable[...,\u00a0Any]]\n</code></pre> <p>The command wrapper.</p> Returns: <p><code>Callable[[Callable[..., Any]], Callable[..., Any]]</code></p> kwargs_preprocessor <pre><code>(self, func:\u00a0Callable[...,\u00a0Any]) \u2011&gt; Callable[...,\u00a0Any]\n</code></pre> option_the <pre><code>(self, maxlen_type_string:\u00a0int, maxlen_opts_help:\u00a0int) \u2011&gt; Callable[...,\u00a0tuple[str,\u00a0str,\u00a0str]]\n</code></pre> options <pre><code>(self) \u2011&gt; Callable[[Callable[...,\u00a0Any]],\u00a0Callable[...,\u00a0Any]]\n</code></pre> <p>The options wrapper. My God in heaven, I'm agnostic, but please save me from all evil. Amen.</p> Returns: <p><code>Callable[[Callable[..., Any]], Callable[..., Any]]</code></p> wrap <pre><code>(self, func:\u00a0Callable[...,\u00a0Any]) \u2011&gt; Callable[...,\u00a0Any]\n</code></pre> Args: <ul> <li>func (<code>Callable[..., Any]</code>): Function to be wrapped.</li> </ul> Returns: <p><code>Callable[..., Any]</code>: Wrapped function.</p>"},{"location":"docs/0/0/api/utils/base_exc/","title":"src.utils.base_exc","text":"Functions c_exc <pre><code>(cls:\u00a0Type[BaseException]) \u2011&gt; Type[BaseException]\n</code></pre> <p>Decorator to raise a custom exception.</p> <p>This function gives the class an init function that raises the exception. If the class does not inherit from any Exception, it will be automatically inherit from Exception. This function also wraps the Exception with <code>c_exc_str</code> method, for adding the <code>__str__</code> method.</p> Args: <ul> <li>cls (<code>BaseException | Object</code>): The exception to modify.</li> </ul> Returns: <p><code>BaseException</code>: The exception to raise.</p> c_exc_str <pre><code>(cls:\u00a0Type[BaseException]) \u2011&gt; Type[BaseException]\n</code></pre> <p>Decorator to add the str method to an exception.</p> Args: <ul> <li>cls (<code>BaseException</code>): The exception to add the str method to.</li> </ul> Returns: <p><code>BaseException</code>: The exception to raise.</p>"},{"location":"docs/0/0/api/utils/cd/","title":"src.utils.cd","text":"Functions test <pre><code>() \u2011&gt; None\n</code></pre> Classes BEHAVIOR <pre><code>(value, names=None, *, module=None, qualname=None, type=None, start=1)\n</code></pre> <p>An enumeration.</p> Ancestors (in MRO) <ul> <li>enum.Enum</li> </ul> Class variables <p><code>append</code></p> <p><code>insert</code></p> <p><code>modify</code></p> CustomDict <pre><code>(*args, **kwargs)\n</code></pre> <p>Custom dictionary.</p> Ancestors (in MRO) <ul> <li>builtins.dict</li> </ul> Methods dir <pre><code>(self, path:\u00a0str\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', de:\u00a0Any\u00a0=\u00a0'c0VjUmVUX2NPZEUgYnkgd2hpX25l', sep:\u00a0str\u00a0=\u00a0'/') \u2011&gt; Any\n</code></pre> traverse <pre><code>(self, path:\u00a0str, elem:\u00a0Union[dict[str,\u00a0Any],\u00a0Sized], sep:\u00a0str, idx:\u00a0int\u00a0=\u00a00, og_path:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None) \u2011&gt; Union[tuple[int,\u00a0Union[Any,\u00a0dict[str,\u00a0int]]],\u00a0Any]\n</code></pre> <p>summary</p> <p>Return States | State ||                              Return Type ||                       Description | |--------:|-------------------------------------------:|:----------------------------------| |     0 ||                       Any (Indexed Item) || Path fully traversed              | |     1 ||   dict[str, int] (Kwargs for CDKeyError) || Path's not in element             | |     2 || dict[str, int] (Kwargs for CDIndexError) || Path's current index not in range |</p> <p>Callback States | State ||                             Arguments Type ||                                Description | |--------:|---------------------------------------------:|:-------------------------------------------| |     0 ||  dict (Indexed Item), str (key), int (idx) ||  Path fully traversed; Element type <code>dict</code> | |     1 || Sized (Indexed Item), int (key), int (idx) || Path fully traversed; Element type <code>Sized</code> |</p> Args: <pre><code>path (str): _description_\nelem (dict[str, Any] | Sized): _description_\nsep (str): _description_\nidx (int, optional): _description_. Defaults to 0.\nog_path (Optional[str], optional): _description_. Defaults to None.\n</code></pre> Raises: <pre><code>CDKeyError: _description_\nCDKeyError: _description_\nCDKeyError: _description_\nCDIndexError: _description_\nCDTypeError: _description_\n</code></pre> Returns: <pre><code>Any: _description_\n</code></pre> <pre><code>flowchart TD\n    start([start]) --&gt; args[/path, value, elem/] --&gt; a\n    a{elem isDict?}\n        a --&gt; |yes| b{key in&lt;br&gt;elem}\n            b --&gt; |yes| c{path fully&lt;br&gt;traversed?}\n                c --&gt;\n|no| y[[\"traverse(&lt;br&gt;path=path[1:],&lt;br&gt;elem=elem[key]&lt;br&gt;)\"]]:::success\n                c --&gt; |yes| x[/\"(0, elem[key])\"/]:::success\n            b --&gt; |no| f([CDKeyError]):::error\n        a --&gt; |no| g{elem isSized?}\n            g --&gt; |no| l([\"CDTypeError;&lt;br&gt;exp dict/Sized\"]):::error\n                h --&gt; |no| m([\"CDKeyError;&lt;br&gt;key empty\"]):::error\n                    i --&gt; |no| n([\"CDKeyError;&lt;br&gt;key not int\"]):::error\n            g --&gt; |yes| h{\"key notEmpty?\"}\n                h --&gt; |yes| i{key int?}\n                    i --&gt; |yes| j{key inRange?}\n                        j --&gt;\n|no| w[/\"(1, {'idx': idx, 'ls_idx': ls_idx, 'len_iter': len_iter})\"/]:::success\n                        j ----&gt; |yes| c\n\n    classDef success color:#83ce9e,stroke:#6fc890\n    classDef error color:#f3626b,stroke:#f14651</code></pre>"},{"location":"docs/0/0/api/utils/cfg/","title":"src.utils.cfg","text":"Functions dcfg <pre><code>(value:\u00a0dict[str,\u00a0typing.Any], ext:\u00a0str) \u2011&gt; str\n</code></pre> <p>Dump the given value to a string with the given extension.</p> Args: <ul> <li>value (<code>dict</code>): Value to dump to a string.</li> <li>ext (<code>str</code>): Extension to dump the value to.</li> </ul> Returns: <p><code>str</code>: The dumped value.</p> pcfg <pre><code>(d:\u00a0str, type:\u00a0str) \u2011&gt; src.utils.cd.CustomDict\n</code></pre> <p>Parse the given string as the given type.</p> Args: <ul> <li>d (<code>str</code>): String to parse.</li> <li>type (<code>str</code>): Type to parse the string as.</li> </ul> Returns: <p><code>CustomDict</code>: The parsed string.</p> rcfg <pre><code>(file:\u00a0str) \u2011&gt; src.utils.cd.CustomDict\n</code></pre> <p>Read the contents of a file with the given file name.</p> Args: <ul> <li>file (<code>str</code>): File name of the file to read the contents of.</li> </ul> Returns: <p><code>CustomDict</code>: The contents of the file.</p> wcfg <pre><code>(file:\u00a0str, value:\u00a0dict[typing.Any,\u00a0typing.Any]\u00a0|\u00a0list[typing.Any]) \u2011&gt; None\n</code></pre> <p>Write the given value to a file with the given file name.</p> Args: <ul> <li>file (<code>str</code>): File name of the file to write the value to.</li> <li>value (<code>dict[Any, Any] | list[Any])</code>: Value to write to the file.</li> </ul> Classes ExtensionNotSupported <pre><code>(*args:\u00a0list[typing.Any], **kwargs:\u00a0dict[str,\u00a0typing.Any])\n</code></pre> <p>Method or function hasn't been implemented yet.</p> Ancestors (in MRO) <ul> <li>builtins.NotImplementedError</li> <li>builtins.RuntimeError</li> <li>builtins.Exception</li> <li>builtins.BaseException</li> </ul>"},{"location":"docs/0/0/api/utils/exceptions/","title":"src.utils.exceptions","text":"Classes CDExceptions <pre><code>()\n</code></pre> Class variables <p><code>API</code></p> <p><code>Internals</code></p> CLIExceptions <pre><code>()\n</code></pre> Class variables <p><code>TerminalTooThin</code> Common base class for all non-exit exceptions.</p> <p><code>ValidationError</code></p> GeneralExceptions <pre><code>()\n</code></pre> Class variables <p><code>PrerequisiteNotFound</code></p> <p><code>ValidationError</code></p> KatexExceptions <pre><code>()\n</code></pre> Class variables <p><code>NotFound</code> Common base class for all non-exit exceptions.</p>"},{"location":"docs/0/0/api/utils/style/","title":"src.utils.style","text":"Variables <p><code>COLORS</code> t1: F3F78D t2: FF8D5C t3: E84855 t4: B56B45 t5: 404E7C t6: 55828B t7: 4E8098</p> Functions pp <pre><code>(t:\u00a0Any, ca:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None, *args:\u00a0list[typing.Any], **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; None\n</code></pre> <p>Center rich printable objects, then pretty print it.</p> Args: <ul> <li>t (<code>Any</code>): Rich printable object to be centered, then pretty printed.</li> <li>ca (<code>bool</code>, optional): Determines whether to center text in the group individually. Defaults to <code>None</code>.</li> </ul> split_text <pre><code>(t:\u00a0str) \u2011&gt; list[str]\n</code></pre> text <pre><code>(t:\u00a0str, *args:\u00a0list[typing.Any], ca:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None, **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; rich.console.Group\n</code></pre> Classes C <pre><code>()\n</code></pre> Class variables <p><code>h0</code></p> <p><code>h1</code></p> <p><code>h2</code></p> <p><code>s0</code></p> <p><code>s1</code></p> <p><code>s2</code></p> S <pre><code>()\n</code></pre> Class variables <p><code>p0</code></p> <p><code>p1</code></p> <p><code>p_critical</code></p> <p><code>p_error</code></p> <p><code>p_warning</code></p> <p><code>t0</code></p> <p><code>t1</code></p> <p><code>t2</code></p> <p><code>t3</code></p> <p><code>t4</code></p> <p><code>t5</code></p> <p><code>t6</code></p> <p><code>t_critical</code></p> <p><code>t_error</code></p> <p><code>t_good</code></p> <p><code>t_warning</code></p> ct <pre><code>()\n</code></pre> Static methods group <pre><code>(*ls:\u00a0rich.console.ConsoleRenderable\u00a0|\u00a0rich.console.RichCast\u00a0|\u00a0str) \u2011&gt; rich.console.Group\n</code></pre> <p>Group given list of rich printable objects.</p> Returns: <p><code>Group</code>: Group of rich printable objects</p> table <pre><code>(cols:\u00a0list[str], rows:\u00a0list[list[str]]) \u2011&gt; None\n</code></pre> <p>Print table from given list of str and list of list of strings for the columns and rows respectively.</p> Args: <ul> <li>cols (<code>list[str]</code>): List of string for column labels.</li> <li>rows (<code>list[list[str]]</code>): List of rows (list of strings).</li> </ul>"},{"location":"docs/0/0/api/utils/types/","title":"src.utils.types","text":""},{"location":"docs/0/0/api/utils/utils/","title":"src.utils.utils","text":"Functions dnrp <pre><code>(file:\u00a0str, n:\u00a0Optional[int]\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>Get the directory component of a pathname by n times recursively then return it.</p> Args: <ul> <li>file (<code>str</code>): File to get the directory of.</li> <li>n (<code>Optional[int]</code>, optional): Number of times to get up the directory???? Defaults to 1.</li> </ul> Returns: <p><code>str</code>: The directory component got recursively by n times from the given pathname</p> dpop <pre><code>(d:\u00a0dict[typing.Any,\u00a0typing.Any], pop:\u00a0list[int\u00a0|\u00a0list[str\u00a0|\u00a0int\u00a0|\u00a0tuple[str,\u00a0...]]\u00a0|\u00a0str], de:\u00a0Optional[Any]\u00a0=\u00a0None) \u2011&gt; Any\n</code></pre> <p>Iterate through the preferred order of precedence (<code>pop</code>) and see if the value exists in the dictionary. If it does, return it. If not, return <code>de</code>.</p> Args: <ul> <li>d (<code>Dict[Any, Any]</code>): Dictionary to retrieve the value from.</li> <li>pop (<code>list[int | tuple[str | int | tuple] | str]</code>): List of keys to iterate through.</li> <li>de (<code>Any</code>, optional): Default object to be returned. Defaults to None.</li> </ul> Returns: <p><code>Any</code>: Retrieved value.</p> dt <pre><code>(dt:\u00a0str, format:\u00a0str) \u2011&gt; str\n</code></pre> <p>Remove timezone from datetime and format it to ISO 8601 format.</p> Args: <ul> <li>dt (<code>str</code>): Unformatted datetime string to be formatted to ISO 8601 format</li> <li>format (<code>str</code>): The initial format of the datetime string</li> </ul> Returns: <p><code>str</code>: Formatted datetime string</p> dt_ts <pre><code>(ts:\u00a0str) \u2011&gt; str\n</code></pre> <p>Convert the given unix timestamp to ISO 8601 format.</p> Args: <ul> <li>ts (<code>str</code>): unix timestamp to be converted to ISO 8601 format</li> </ul> Returns: <p><code>str</code>: Formatted datetime string</p> file_exists <pre><code>(fp:\u00a0str) \u2011&gt; str\n</code></pre> <p>Check if the given file path exists.</p> Args: <ul> <li>fp (<code>str</code>): File path to check if it exists.</li> </ul> Raises: <ul> <li><code>exceptions.GeneralExceptions.ValidationError.FileNotFound</code>: Raised when a file in the path is not found.</li> </ul> Returns: <p><code>str</code>: Return <code>fp</code> when file path exists.</p> fill_ls <pre><code>(*, ls:\u00a0Sequence[Any], length:\u00a0int, filler:\u00a0Optional[Any]\u00a0=\u00a0None) \u2011&gt; Sequence[Any]\n</code></pre> <p>Fill given list (<code>ls</code>) with <code>filler</code> up to <code>length</code>.</p> Args: <ul> <li>ls (<code>types.SequenceAny</code>): List to fill with <code>filler</code> up to <code>length</code></li> <li>length (<code>int</code>): Length of the list to achieve.</li> <li>filler (<code>Optional[Any]</code>, optional): Filler to use. Defaults to <code>None</code>.</li> </ul> Returns: <p><code>types.SequenceAny</code>: Filled list.</p> inmd <pre><code>(p:\u00a0str, ls:\u00a0Optional[list[str]]\u00a0=\u00a0None) \u2011&gt; str\n</code></pre> <p>\"If Not <code>os.path.isdir</code>, Make Directories\"</p> Args: <ul> <li>p (<code>str</code>): The path to be created, if it does not exist.</li> <li>ls(<code>Optional[list[str]]</code>, optional): List to append directories to that are not found and successfully created. Defaults to None.</li> </ul> Returns: <p><code>str</code>: The path given.</p> iter_ls_with_items <pre><code>(ls:\u00a0list[typing.Any], *items:\u00a0list[typing.Any]) \u2011&gt; Generator[tuple[Any,\u00a0...],\u00a0None,\u00a0None]\n</code></pre> ivnd <pre><code>(var:\u00a0Any, de:\u00a0Any) \u2011&gt; Any\n</code></pre> <p>If Var is None, return Default else var.</p> Args: <ul> <li>var (<code>Any</code>): Variable to check if it is None.</li> <li>de (<code>Any</code>): Default value to return if var is None.</li> </ul> Returns: <p><code>Any</code>: var if var is not None else de.</p> le <pre><code>(expr:\u00a0str) \u2011&gt; Any\n</code></pre> <p>Literal Evaluation</p> Args: <ul> <li>expr (<code>str</code>): Expression to be evaluated.</li> </ul> Returns: <p><code>Any</code>: Expression literally evaluated.</p> noop <pre><code>(*args:\u00a0list[typing.Any], **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; None\n</code></pre> <p>No operation</p> noop_single_kwargs <pre><code>(arg:\u00a0Any) \u2011&gt; Any\n</code></pre> repl <pre><code>(s:\u00a0str, repl_dict:\u00a0dict[str,\u00a0list[str]]) \u2011&gt; str\n</code></pre> <p>Iterate through the dictionary, find the values in the given string and replace it with the corresponding key, and output the modified string.</p> Args: <ul> <li>s (<code>str</code>): String to modify.</li> <li>repl_dict (<code>dict[str, list[str]]</code>): key-value pairs to replace string within the given string.</li> </ul> Returns: <p><code>str</code>: Modified string.</p> rfnn <pre><code>(*args:\u00a0list[typing.Any]) \u2011&gt; Any\n</code></pre> <p>Return First Non-None</p> <p>Return the first argument that is not <code>None</code>, else return <code>None</code>.</p> Returns: <p><code>Any</code>: The first argument that is not <code>None</code>, else <code>None</code>.</p> run_mp <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Any]) \u2011&gt; list[typing.Any]\n</code></pre> run_mp_qgr <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Any]) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> run_mp_qir <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Any], callback:\u00a0Callable[...,\u00a0Any]) \u2011&gt; None\n</code></pre> <p>Run <code>multiprocessing.Pool().map_async()</code>, and quit in return.</p> <p>Iterate over <code>iterable</code> and apply iterated item to <code>func</code> asynchronously. Wait for a single process in the pool to return, and terminate the pool.</p> <p>This function requires the given function to return a bool, or an iterable with its first item as a bool. This bool is then used to decide whether to trigger the callback and terminate the pool.</p> run_mp_star <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Iterable[Any]]) \u2011&gt; list[typing.Any]\n</code></pre> run_mp_star_qgr <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Iterable[Any]]) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> run_mp_star_qir <pre><code>(func:\u00a0Callable[...,\u00a0Any], iterable:\u00a0Iterable[Iterable[Any]], callback:\u00a0Callable[...,\u00a0Any]) \u2011&gt; None\n</code></pre> <p>Run <code>multiprocessing.Pool().starmap_async()</code>, and quit in return.</p> <p>Iterate over <code>iterable</code> and apply iterated items to <code>func</code> asynchronously. Wait for a single process in the pool to return, and terminate the pool.</p> sanitize_text <pre><code>(s:\u00a0str) \u2011&gt; str\n</code></pre> <p>Sanitize input text.</p> <p>Reference: https://stackoverflow.com/a/93029</p> Args: <ul> <li>s (<code>str</code>): Text to be sanitized.</li> </ul> Returns: <p><code>str</code>: Sanitized text.</p> squery <pre><code>(query:\u00a0str, possibilities:\u00a0list[str], cutoff:\u00a0int\u00a0|\u00a0float\u00a0=\u00a00.6, *, processor:\u00a0Callable[[Any],\u00a0Any]\u00a0=\u00a0&lt;function &lt;lambda&gt;&gt;) \u2011&gt; Generator[tuple[None,\u00a0str]\u00a0|\u00a0tuple[float,\u00a0str],\u00a0None,\u00a0None]\n</code></pre> <p>Custom search query.</p> Args: <ul> <li>query (<code>str</code>): String to search for in the possibilities.</li> <li>possibilities (<code>list[str]</code>): The possibilities to search from.</li> <li>cutoff (<code>int | float</code>, optional): The minimum percentage of similarity from the given possibilities. Defaults to <code>0.6</code>.</li> <li>processor (<code>Callable[[Any], Any]</code>, optional): Processes the possibilities before comparing it with the query. Defaults to <code>lambda x: x</code>.</li> </ul> Returns: <p><code>Generator[tuple[None, str] | tuple[float, str], None, None]</code>: Generator object of mastching search quries.</p> str2int <pre><code>(s:\u00a0str) \u2011&gt; Optional[int]\n</code></pre> <p>If given string is decimal, convert string to integer, else return False.</p> Args: <pre><code>s (str): string to convert to integer.\n</code></pre> Returns: <pre><code>bool: _description_\n</code></pre> which_ls <pre><code>(cmd:\u00a0str, mode:\u00a0Optional[int]\u00a0=\u00a0None, path:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0None) \u2011&gt; Union[tuple[str],\u00a0tuple[str,\u00a0...],\u00a0ForwardRef(None)]\n</code></pre> <p>Yoinked from shutil. Given a command, mode, and a PATH string, return the path which conforms to the given mode on the PATH, or None if there is no such file.</p> <p><code>mode</code> defaults to os.F_OK | os.X_OK. <code>path</code> defaults to the result of os.environ.get(\"PATH\"), or can be overridden with a custom search path.</p> Classes CallbackGetResult <pre><code>()\n</code></pre> Methods callback <pre><code>(self, *args:\u00a0list[typing.Any]) \u2011&gt; None\n</code></pre> get <pre><code>(self) \u2011&gt; tuple[None]\u00a0|\u00a0tuple[typing.Any,\u00a0...]\n</code></pre> ExtInquirerControl <pre><code>(choices:\u00a0Sequence[Union[str,\u00a0questionary.prompts.common.Choice,\u00a0Dict[str,\u00a0Any]]], default:\u00a0Union[str,\u00a0questionary.prompts.common.Choice,\u00a0Dict[str,\u00a0Any],\u00a0ForwardRef(None)]\u00a0=\u00a0None, pointer:\u00a0str\u00a0|\u00a0None\u00a0=\u00a0'\u00bb', use_indicator:\u00a0bool\u00a0=\u00a0True, use_shortcuts:\u00a0bool\u00a0=\u00a0False, show_selected:\u00a0bool\u00a0=\u00a0False, use_arrow_keys:\u00a0bool\u00a0=\u00a0True, initial_choice:\u00a0Union[str,\u00a0questionary.prompts.common.Choice,\u00a0Dict[str,\u00a0Any],\u00a0ForwardRef(None)]\u00a0=\u00a0None, **kwargs:\u00a0Any)\n</code></pre> <p>Control that displays formatted text. This can be either plain text, an :class:<code>~prompt_toolkit.formatted_text.HTML</code> object an :class:<code>~prompt_toolkit.formatted_text.ANSI</code> object, a list of <code>(style_str, text)</code> tuples or a callable that takes no argument and returns one of those, depending on how you prefer to do the formatting. See <code>prompt_toolkit.layout.formatted_text</code> for more information.</p> <p>(It's mostly optimized for rather small widgets, like toolbars, menus, etc...)</p> <p>When this UI control has the focus, the cursor will be shown in the upper left corner of this control by default. There are two ways for specifying the cursor position:</p> <ul> <li> <p>Pass a <code>get_cursor_position</code> function which returns a <code>Point</code> instance   with the current cursor position.</p> </li> <li> <p>If the (formatted) text is passed as a list of <code>(style, text)</code> tuples   and there is one that looks like <code>('[SetCursorPosition]', '')</code>, then   this will specify the cursor position.</p> </li> </ul> <p>Mouse support:</p> <pre><code>The list of fragments can also contain tuples of three items, looking like:\n(style_str, text, handler). When mouse support is enabled and the user\nclicks on this fragment, then the given handler is called. That handler\nshould accept two inputs: (Application, MouseEvent) and it should\neither handle the event or return `NotImplemented` in case we want the\ncontaining Window to handle this event.\n</code></pre> <p>:param focusable: <code>bool</code> or :class:<code>.Filter</code>: Tell whether this control is     focusable.</p> <p>:param text: Text or formatted text to be displayed. :param style: Style string applied to the content. (If you want to style     the whole :class:<code>~prompt_toolkit.layout.Window</code>, pass the style to the     :class:<code>~prompt_toolkit.layout.Window</code> instead.) :param key_bindings: a :class:<code>.KeyBindings</code> object. :param get_cursor_position: A callable that returns the cursor position as     a <code>Point</code> instance.</p> Ancestors (in MRO) <ul> <li>questionary.prompts.common.InquirerControl</li> <li>prompt_toolkit.layout.controls.FormattedTextControl</li> <li>prompt_toolkit.layout.controls.UIControl</li> </ul> Class variables <p><code>answer_text</code></p> ExtQuestion <pre><code>(application:\u00a0Application[Any])\n</code></pre> <p>A question to be prompted.</p> <p>This is an internal class. Questions should be created using the predefined questions (e.g. text or password).</p> Ancestors (in MRO) <ul> <li>questionary.question.Question</li> </ul> Class variables <p><code>kbi</code></p> Methods ask <pre><code>(self, patch_stdout:\u00a0bool\u00a0|\u00a0None\u00a0=\u00a0None, **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; tuple[bool,\u00a0typing.Any]\n</code></pre> <p>Ask the question synchronously and return user response.</p> Args: <ul> <li>patch_stdout (<code>bool</code>, optional): Ensure that the prompt renders correctly if other threads are printing to stdout. Defaults to <code>None</code>.</li> </ul> Returns: <p><code>Any</code>: The answer from the question.</p> PoolTerminate <pre><code>(pool:\u00a0multiprocessing.pool.Pool, callback:\u00a0Callable[...,\u00a0Any])\n</code></pre> Methods inner <pre><code>(self, err:\u00a0bool, *args:\u00a0list[typing.Any], **kwargs:\u00a0dict[str,\u00a0typing.Any]) \u2011&gt; None\n</code></pre>"},{"location":"docs/0/0/contribute/","title":"Index","text":"For Contributors  <ul> <li>Translating md2pdf</li> </ul>"},{"location":"docs/0/0/contribute/translations/","title":"Translations","text":"Translations"},{"location":"docs/0/0/contribute/translations/#toc","title":"Table of Contents","text":"<ul><li>Summary</li><li>Definition of Terms</li><li>Translation Directory</li><li>Notes for Translators<ul><li>Rule of Thumb</li><li>Variables</li></ul></li><li>Translation File<ul><li>Structure<ul><li>metadata<ul><li>version<ul><li>For The Author</li><li>For The Translators</li></ul></li><li>contributors<ul><li>name</li><li>desc</li><li>links<ul><li>anilist</li><li>discord</li><li>email</li><li>github</li><li>reddit</li><li>twitter</li></ul></li></ul></li></ul></li><li>splash<ul><li>str</li><li>desc</li><li>tln</li></ul></li><li>text<ul><li>{scope}<ul><li>{class}<ul><li>{key}<ul><li>str</li><li>desc</li><li>tln</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>"},{"location":"docs/0/0/contribute/translations/#summary","title":"Summary","text":"<p>While there are no future plans for expanding to the global audience, of which most does not speak English, this application is ready for internationalization.</p>"},{"location":"docs/0/0/contribute/translations/#definition-of-terms","title":"Definition of Terms","text":"<p>i18n (abbreviation, numeronym): stands for internationalization; process of designing a software application so that it can be adapted to various languages and regions without engineering changes</p>"},{"location":"docs/0/0/contribute/translations/#translation-directory","title":"Translation Directory","text":"<p>The files that contain the translations can be located at <code>./dev/constants/version/{u}/{d}/lang/</code></p> <p>whereas:</p> <ul> <li><code>{u}</code> refers to the <code>user</code> version that uses the constants under this directory</li> <li><code>{d}</code> refers to the <code>dev</code> version that uses the constants under this directory</li> </ul> Notes:  For more information, visit the notes for whi~nyaan!."},{"location":"docs/0/0/contribute/translations/#notes-for-translators","title":"Notes for Translators","text":"<p>For those who want to translate this application, please read all of the following text.</p>"},{"location":"docs/0/0/contribute/translations/#notes-for-translators-rule-of-thumb","title":"Rule of Thumb","text":"<p>This is written by the author with no consideration for other languages. And as such, recommendations and suggestions are highly appreciated.</p> <ul> <li>Any technical terminologies should be left untranslated, unless noted by the author (developer) otherwise.</li> <li>Any technical phrase that cannot be translated properly to the target language should be translated without oversimplifying; Oversimplification might lead to a misunderstanding</li> <li>Unless the tone affects the meaning of the text or unless stated otherwise, translators should not preserve the author's tone and should translate it with a neutral tone</li> </ul>"},{"location":"docs/0/0/contribute/translations/#notes-for-translators-variables","title":"Variables","text":"<p>You might see a text that is enclosed in a bracket, like the following:</p> <pre><code>{version}\n</code></pre> <p>These are variables, and are replaced with information in the application before displaying them to the user.</p> <p>So, our example would be displayed to the users as such:</p> <pre><code>69.4.20\n</code></pre> <p>As you can see, it is crucial for displaying information to the users.</p> <p>When translating a piece of text, make sure to put these variables in an appropriate place, and do not translate its name.</p> <p>As an example, we will translate this English text:</p> <pre><code>Thank you for using {app_name}!\n</code></pre> <p>To Tagalog:</p> <pre><code>Sa paggamit ng {app_name}, ako ay taos-pusong nagpapasalamat sa iyong pagtangkilik!\n</code></pre> <p>The variable's name is not translated.</p> <p>In this next example, the variable is already in a fixed position:</p> <pre><code>{app_name} version: {version}\n</code></pre> <p>The Tagalog translation should look like this:</p> <pre><code>bersyon ng {app_name}: {version}\n</code></pre> <p>The <code>app_name</code> variable changed places to translate properly. However, there is no need for <code>version</code> to do so, as it is formatted.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file","title":"Translation File","text":"<p>A translation file can be found under the translation directory.</p> <p>Whereas, its name is ISO 639-1 language code that corresponds to its contained translations.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure","title":"Structure","text":""},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata","title":"metadata","text":"<p>Metadata of the translation.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-version","title":"version","text":"<p>Version of the translation.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-version-for-the-author","title":"For The Author","text":"<p>Given a version number <code>major</code>.<code>minor</code>.<code>patch</code>, bump the:</p> <ul> <li> <p><code>major</code> version when you make a significant change in the contents of a text or the description along side it, that you think it warrants a change in all of the translations.</p> </li> <li> <p><code>minor</code> version when you make a change in the contents of a text or the description along side it, which does not warrant a change in all of the translations. Example are modifying text to use much more understandable words.</p> </li> <li> <p><code>patch</code> version when you fix a typographical error in a text. This might induce a change in other translation, but does not warrant otherwise.</p> </li> </ul> <p>Changing the schema, or any key names shall warrant a <code>dev</code> version bump for the application. You break the english text for this application, you fix every other translation.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-version-for-the-translators","title":"For The Translators","text":"<p>As the app is written in English, follow the latest version of the english text.</p> <p>The translation will be bumped as per the specification written here.</p> <p>If you updated your translations to match that of the current English translation, change the version to the current version of the English translation.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors","title":"contributors","text":"<p>List of translation contributors' information, for attribution purposes.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-name","title":"name","text":"<p>Name of the contributor.</p> <p>It can be an alias, nickname, or a full name. As long as you are happy with being credited using that name, I have no problem with it.</p> <p>Obscene and/or offensive names however will be apprehended. Otherwise, be creative.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-desc","title":"desc","text":"<p>Describe yourself.</p> <p>If you're getting credited, go all out. You can even advertise your personal project. As long as the contents are not obscene or offensive, I'm fine with it.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links","title":"links","text":"<p>Dictionary of links to your contacts, social media, and whatnot.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-anilist","title":"anilist","text":"<p>Anilist username.</p> <p>Example:</p> <pre><code>anilist: whinyaan\n</code></pre> <p>Links to https://anilist.co/user/whinyaan.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-discord","title":"discord","text":"<p>Key-value pairs of Discord tag and their snowflake.</p> <p>Example:</p> <pre><code>discord:\nwhi_ne#4783:\n848092597822160907\n</code></pre> <p>Links to whi_ne#4783.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-email","title":"email","text":"<p>List of electronic mail addresses.</p> <p>Example:</p> <pre><code>email:\n- whinyaan@protonmail.com\n</code></pre> <p>Links to whinyaan@protonmail.com.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-github","title":"github","text":"<p>Github username.</p> <p>Example:</p> <pre><code>github: whinee\n</code></pre> <p>Links to https://github.com/whinee.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-reddit","title":"reddit","text":"<p>Reddit username.</p> <p>Example:</p> <pre><code>reddit: whi-nyaan\n</code></pre> <p>Links to https://reddit.com/user/whi-nyaan.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-metadata-contributors-links-twitter","title":"twitter","text":"<p>Twitter username.</p> <p>Example:</p> <pre><code>twitter: whi_nyaan\n</code></pre> <p>Links to https://twitter.com/whi_nyaan.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-splash","title":"splash","text":"<p>Dictionary of random stuff to be displayed at startup of the application.</p> <p>Example:</p> <pre><code>music_artist_rec:\n    str: Listen to Kanro! https://kanromusic.com\n    desc: Author's music artist recommendation\n</code></pre>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-splash-str","title":"str","text":"<p>The actual splash message.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-splash-desc","title":"desc","text":"<p>Description of the splash message. Might be useful to keep the translation accurate at an acceptable margin. Will not be displayed.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-splash-tln","title":"tln","text":"<p>Stands for translators' notes, used by translators to describe to the next translators any compromises done to translate the text to a certain language, or whatnot.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text","title":"text","text":"<p>Dictionary of scopes, classes, and keys (dictionary) of text to display in the application.</p> <p>Example:</p> <pre><code>cli:\n    init:\n        choose_language:\n            str: Choose language\n            desc: |-\n                Choose app language\n</code></pre>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope","title":"{scope}","text":"<p>There are three scopes allowed, but only the first two are applicable:</p> <ul> <li>common</li> <li>cli</li> <li>gui</li> </ul> <p>The first scope is class of keys that can be used in both the CLI and GUI versions of the app. This includes the description and motto of the program, prompts like <code>yes</code> or <code>no</code>, and whatnot. The rest is self-explanatory.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope-class","title":"{class}","text":"<p>This is where keys are categorized. For example, keys that convey information regarding the application can be put under the <code>info</code> class, while the keys that are used for prompting the users can be put under the <code>prompt</code> class.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope-class-key","title":"{key}","text":"<p>This is the name of the key. There is no general naming convention, but the developer seems to have one in her mind.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope-class-key-str","title":"str","text":"<p>The string in the language defined by the language file.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope-class-key-desc","title":"desc","text":"<p>Description of the key. Might be useful to keep the translation accurate at an acceptable margin. Will not be displayed.</p>"},{"location":"docs/0/0/contribute/translations/#translation-file-structure-text-scope-class-key-tln","title":"tln","text":"<p>Stands for translators' notes, used by translators to describe to the next translators any compromises done to translate the text to a certain language, or whatnot.</p>"}]}